// This file is part of Smuxi and is licensed under the terms of MIT/X11
//
// Copyright (c) 2015 Carlos Martín Nieto
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
using System;
using System.IO;
using System.Collections.Generic;
using ServiceStack.Text;

namespace Smuxi.Common {

    public class GenerateEmojione {

        readonly static string outputHead = @"
// This file is autogenerated
using System;
using System.Collections.Generic;

namespace Smuxi.Common {
    public partial class Emojione {
        static readonly Dictionary<string, string> map = new Dictionary<string, string> () {
";

        readonly static string outputTail = @"
        };
    }
}
";

        public static void Main(string[] args) {
            if (args.Length < 2) {
                Console.Error.WriteLine("Usage: GenerateEmojione.cs <emoji.json> <EmojiMapping.cs>");
                Environment.Exit(1);
            }

            var emojiDesc = File.ReadAllText(args[0]);
            var objectList = JsonSerializer.DeserializeFromString<List<JsonObject>>(emojiDesc);
            var obj = objectList[0];
            using (var writer = new StreamWriter(args[1])) {
                writer.Write(outputHead);
                foreach (var j in obj) {
                    var emoji = JsonSerializer.DeserializeFromString<JsonObject>(j.Value);
                    writer.WriteLine(String.Format("{{ \"{0}\", \"{1}\" }},", j.Key, emoji.Get("unicode")));
                }
                writer.Write(outputTail);
                writer.Flush();
            }
        }
    }
}
