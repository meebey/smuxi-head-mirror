// This file is part of Smuxi and is licensed under the terms of MIT/X11
//
// Copyright (c) 2015 Carlos Martín Nieto
// Copyright (c) 2017 Mirco Bauer <meebey@meebey.net>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Smuxi.Common {

    public class GenerateEmojione {

        readonly static string outputHead = @"
// This file is autogenerated
using System;
using System.Collections.Generic;

namespace Smuxi.Common {
    public partial class Emojione {
        static readonly Dictionary<string, string> map = new Dictionary<string, string> () {
";

        readonly static string outputTail = @"
        };
    }
}
";

        public class Emoji
        {
            public string Unicode { get; set; }
            public string Shortname { get; set; }
            public List<string> Aliases { get; set; }
        }

        public static void Main(string[] args) {
            if (args.Length < 2) {
                Console.Error.WriteLine("Usage: GenerateEmojione.cs <emoji.json> <EmojiMapping.cs>");
                Environment.Exit(1);
            }

            var emojiDesc = File.ReadAllText(args[0]);
            var emojiDict = JsonConvert.DeserializeObject<Dictionary<string, Emoji>>(emojiDesc);
            Console.Error.WriteLine("number of parsed emojis: {0}", emojiDict.Count);
            using (var writer = new StreamWriter(args[1])) {
                writer.Write(outputHead);
                foreach (var emoji in emojiDict.Values.OrderBy(x => x.Shortname)) {
                    var unicodeCodePoint = emoji.Unicode;
                    // for backwards compatibility with previously cached emoji
                    // images we have to upper case the code point as the newer
                    // JSON format now uses lower-case code points.
                    // E.g., now it says 0031-20e3 instead of 0031-20E3
                    unicodeCodePoint = unicodeCodePoint.ToUpperInvariant();
                    var shortname = emoji.Shortname;
                    if (String.IsNullOrEmpty(shortname)) {
                        Console.Error.WriteLine("emoji {0} shortname is empty, skipping...", unicodeCodePoint);
                    }
                    var shortnameAlternates = emoji.Aliases;
                    var shortnames = new List<string>();
                    shortnames.Add(shortname);
                    if (shortnameAlternates != null && shortnameAlternates.Count > 0) {
                        shortnames.AddRange(shortnameAlternates);
                    }
                    foreach (var rawName in shortnames) {
                        string strippedName = rawName;
                        if (strippedName.StartsWith(":")) {
                            strippedName = strippedName.Substring(1);
                        }
                        if (strippedName.EndsWith(":")) {
                            strippedName = strippedName.Substring(
                                0, strippedName.Length - 1
                            );
                        }
                        writer.WriteLine(
                            String.Format(
                                @"{{ ""{0}"", ""{1}"" }},",
                                strippedName,
                                unicodeCodePoint
                            )
                        );
                    }
                }
                writer.Write(outputTail);
                writer.Flush();
            }
        }
    }
}
